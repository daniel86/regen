<?xml version="1.0" encoding="UTF-8" ?>
<!--
From GPU Gems3:
Fire is not very different from smoke except that we must store an additional quantity,
called the reaction coordinate, that keeps track of the time elapsed since gas was ignited.
A reaction coordinate of one indicates that the gas was just ignited, and a coordinate of
less than zero indicates that the fuel has been completely exhausted. The evolution of
these values is described by the following equation (from Nguyen et al. 2002):
     d/dtY = -(uNABLA)Y - k
In other words, the reaction coordinate is advected through the flow and decremented
by a constant amount (k) at each time step. In practice, this integration is performed by
passing a value for k to the advection routine, which is
added to the result of the advection. (This value should be nonzero only when advecting
the reaction coordinate.) Reaction coordinates do not have an effect on the dynamics
of the fluid but are later used for rendering (see Section 30.3).
one possible fire effect: a ball of fuel is
continuously generated near the bottom of the volume by setting the reaction coordinate
in a spherical region to one. For a more advanced treatment of flames, see Nguyen
et al. 2002.

Rendering fire is similar to rendering smoke except that instead of blending values as we
march, we accumulate values that are determined by the reaction coordinate Y rather than
the smoke density (see Section 30.2.6). In particular, we use an artist-defined 1D texture
that maps reaction coordinates to colors in a way that gives the appearance of fire. A more
physically based discussion of fire rendering can be found in Nguyen et al. 2002.
The fire volume can also be used as a light source if desired. The simplest approach is to
sample the volume at several locations and treat each sample as a point light source.
The reaction coordinate and the 1D color texture can be used to determine the inten-
sity and color of the light. However, this approach can lead to severe flickering if not
enough point samples are used, and it may not capture the overall behavior of the light.
A different approach is to downsample the texture of reaction coordinates to an ex-
tremely low resolution and then use every voxel as a light source. The latter approach
will be less prone to flickering, but it won't capture any high-frequency lighting effects
(such as local lighting due to sparks).
-->
<fluid
    name="fire-test"
    timestep="0.125"
    framerate="60"
>
    <!-- Named buffers used in fLuid simulation. -->
    <buffers>
        <buffer name="velocity"     components="2" count="2"
                pixelType="16F" size="256,256" />
        <buffer name="vorticity"    components="2" count="2"
                pixelType="16F" size="256,256" />
        <buffer name="density"      components="1" count="2"
                pixelType="16F" size="256,256" />
        <buffer name="temperature"  components="1" count="2"
                pixelType="16F" size="256,256" />
        <buffer name="pressure"     components="1" count="2"
                pixelType="16F" size="256,256" />
        <buffer name="divergence"   components="1" count="1"
                pixelType="16F" size="256,256" />
        <buffer name="obstacles"    components="3" count="1"
                pixelType="16F" size="256,256" />
        <buffer name="fluid"        components="3" count="1"
                pixelType="16F" size="256,256" />

        <buffer name="splat" file="res/textures/ogle.png" />
        <buffer name="pattern" spectrum="320.0,510.0" />
    </buffers>

    <!-- splat obstacles -->
    <operation name="splat.border"
        mode="newState"
        useObstacles="false"
        in_splatBorder="1.0"
        in_splatValue="1.0,0.0,0.0"
        out="obstacles" />

    <!-- Pipeline stages are evaluated sequential each frame. -->
    <operations>
        <!-- Advection transports quantities in the medium. -->
        <operation name="advect"
            mode="newState"
            in_decayAmount="0.99"
            in_quantityLoss="0.0"
            in_velocityBuffer="velocity"
            in_quantityBuffer="velocity"
            in_obstaclesBuffer="obstacles"
            out="velocity" />
        <operation name="advect"
            mode="newState"
            in_decayAmount="0.99"
            in_quantityLoss="0.0"
            in_velocityBuffer="velocity"
            in_quantityBuffer="temperature"
            in_obstaclesBuffer="obstacles"
            out="temperature" />
        <operation name="advect"
            mode="newState"
            in_decayAmount="0.96"
            in_quantityLoss="0.3"
            in_velocityBuffer="velocity"
            in_quantityBuffer="density"
            in_obstaclesBuffer="obstacles"
            out="density" />

        <!-- Swirl -->
        <operation name="vorticity.compute"
            mode="newState"
            in_velocityBuffer="velocity"
            out="vorticity" />
        <operation name="vorticity.confinement"
            mode="modifyState"
            blend="add"
            in_confinementScale="1.2"
            in_vorticityBuffer="vorticity"
            in_obstaclesBuffer="obstacles"
            out="velocity" />

        <!-- Splat fire wall -->
        <operation name="splat.rect"
            mode="modifyState"
            blend="add"
            in_splatPoint="128.0,5.0"
            in_splatSize="184.8,10.0"
            in_splatValue="10.0"
            in_obstaclesBuffer="obstacles"
            out="temperature" />
        <operation name="splat.rect"
            mode="modifyState"
            blend="add"
            in_splatPoint="128.0,5.0"
            in_splatSize="184.8,10.0"
            in_splatValue="10.0"
            in_obstaclesBuffer="obstacles"
            out="density" />
        <!-- Splat texture -->
        <operation name="splat.tex"
            mode="modifyState"
            blend="add"
            in_splatTexture="splat"
            in_texelFactor="11.0"
            in_obstaclesBuffer="obstacles"
            out="temperature" />
        <operation name="splat.tex"
            mode="modifyState"
            blend="add"
            in_texelFactor="12.0"
            in_splatTexture="splat"
            in_obstaclesBuffer="obstacles"
            out="density" />

        <!-- Buoyancy transports velocity by temperature:
             high temperature pushes upwards and low temperature
             pushes downwards. -->
        <operation name="buoyancy"
            mode="modifyState"
            blend="add"
            in_buoyancy="0.1"
            in_weight="0.019"
            in_ambientTemperature="0.0"
            in_temperatureBuffer="temperature"
            in_densityBuffer="density"
            out="velocity" />

        <!-- pressure solve -->
        <operation name="divergence"
            mode="newState"
            in_halfInverseCellSize="0.4"
            in_velocityBuffer="velocity"
            in_obstaclesBuffer="obstacles"
            out="divergence" />
        <operation name="pressure"
            iterations="40"
            mode="newState"
            clearColor="0.0"
            in_alpha="-1.5625"
            in_inverseBeta="0.25"
            in_pressureBuffer="pressure"
            in_divergenceBuffer="divergence"
            in_obstaclesBuffer="obstacles"
            out="pressure" />
        <operation name="substractGradient"
            mode="newState"
            in_gradientScale="0.9"
            in_velocityBuffer="velocity"
            in_pressureBuffer="pressure"
            in_obstaclesBuffer="obstacles"
            out="velocity" />

        <!-- Draw fluid texture. -->
        <operation name="splat.rect"
            useObstacles="false"
            in_splatPoint="128.0,128.0"
            in_splatSize="256.0,256.0"
            in_splatValue="0.0,0.0,0.0,0.0"
            out="fluid" />
        <operation name="visualize.fire"
            mode="newState"
            blend="src"
            in_pattern="pattern"
            in_quantity="density"
            in_texelFactor="0.03"
            in_rednessFactor="5"
            in_fireAlphaMultiplier="0.9"
            in_fireWeight="2.0"
            in_smokeColorMultiplier="2.0"
            in_smokeAlphaMultiplier="0.07"
            in_smokeColor="0.9,0.15,0.055"
            out="fluid" />
        <!-- draw obstacles. -->
        <operation name="visualize.scalar"
            mode="newState"
            blend="alpha"
            in_texelFactor="1.0"
            in_colorPositive="0.8,0.7,0.6"
            in_colorNegative="0.0"
            in_quantity="obstacles"
            out="fluid" />
    </operations>
</fluid>

